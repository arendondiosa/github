{"version":3,"sources":["components/Profile/index.js","App.js","serviceWorker.js","index.js"],"names":["Meta","Card","Profile","console","log","user","react_default","a","createElement","row","justify","col","span","card","style","width","cover","alt","src","avatar_url","actions","icon","type","title","name","description","bio","Component","Footer","Layout","Content","App","layout","components_Profile","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kPAKQA,EAASC,IAATD,KA4BOE,8LAvBXC,QAAQC,IAAIC,oCAIZ,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKC,QAAQ,UACXJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAKC,KAAM,IACTN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CACEC,MAAO,CAAEC,MAAO,KAChBC,MAAOV,EAAAC,EAAAC,cAAA,OAAKS,IAAI,UAAUC,IAAMb,EAAKc,aACrCC,QAAS,CAACd,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAMC,KAAK,YAAchB,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAMC,KAAK,SAAWhB,EAAAC,EAAAC,cAACa,EAAA,EAAD,CAAMC,KAAK,eAEpEhB,EAAAC,EAAAC,cAACR,EAAD,CACEuB,MAAQlB,EAAKmB,KACbC,YAAcpB,EAAKqB,gBAhBXC,aCFdC,EAAoBC,IAApBD,OAAQE,EAAYD,IAAZC,QAeDC,mLAXX,OACEzB,EAAAC,EAAAC,cAACwB,EAAA,EAAD,KACE1B,EAAAC,EAAAC,cAACsB,EAAD,KACExB,EAAAC,EAAAC,cAACyB,EAAD,OAEF3B,EAAAC,EAAAC,cAACoB,EAAD,uBAPUD,aCIEO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlC,EAAAC,EAAAC,cAACiC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.00ae1a96.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Card, Icon, Row, Col } from 'antd';\nimport 'antd/dist/antd.css';\nimport user from '../../data/user.json';\n\nconst { Meta } = Card;\n\n\nclass Profile extends Component {\n  componentDidMount() {\n    console.log(user)\n  }\n\n  render() {\n    return (\n      <Row justify='center'>\n        <Col span={12}>\n          <Card\n            style={{ width: 300 }}\n            cover={<img alt=\"example\" src={ user.avatar_url } />}\n            actions={[<Icon type=\"setting\" />, <Icon type=\"edit\" />, <Icon type=\"ellipsis\" />]}\n          >\n            <Meta\n              title={ user.name }\n              description={ user.bio }\n            />\n          </Card>\n        </Col>\n      </Row>\n    );\n  }\n}\n\nexport default Profile;","import React, { Component } from 'react';\nimport { Layout } from 'antd';\nimport 'antd/dist/antd.css';\n\nimport Profile from './components/Profile';\n\nconst { Footer, Content } = Layout;\n\nclass App extends Component {\n  render() {\n    return (\n      <Layout>\n        <Content>\n          <Profile />\n        </Content>\n        <Footer>Footer</Footer>\n      </Layout>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}